import express, { Application, Request, Response, NextFunction} from 'express';

// App representa o objeto express, ou seja, a inst√¢ncia do nosso servidor web. Depois de criado, podemos usar estes m√©todo
const app: Application = express();  // Tipando 'app' como 'Application'
const PORT: number = 3000;  //Define a porta 3000 para o servidor escutar, Tipagem da porta como n√∫mero

// Middleware para permitir que o Express interprete JSON, 
// faz com que o Express consiga entender e converter o corpo das requisi√ß√µes em JSON
app.use(express.json());

// Rota GET para a raiz
//  define uma rota do tipo GET no caminho 
app.get('/', (req: Request, res: Response): void=> {
  res.send('üöÄ Servidor TypeScript rodando!');
});

app.get('/saudacao', (req: Request, res: Response): Response => {
    return res.send('Ol√°, jovem programador!');
  });

// Iniciando o servidor
app.listen(PORT, (): void => {
  console.log(`üî• Servidor rodando em http://localhost:${PORT}`);
});

// Define um middleware chamado "porteiroMiddleware"
// Middleware √© uma fun√ß√£o que intercepta a requisi√ß√£o antes de ela chegar √† rota final
// NextFunction √© o tipo da fun√ß√£o next(). Se voc√™ n√£o chamar next(), a requisi√ß√£o fica presa no middleware e n√£o chega na rota final
const porteiroMiddleware = (req: Request, res: Response, next: NextFunction) => {
  
    // Exibe no console o caminho da URL acessada na requisi√ß√£o
    console.log(`üì¢ Requisi√ß√£o recebida em: ${req.url}`);
  
    // Chama a fun√ß√£o "next" para permitir que a requisi√ß√£o continue para o pr√≥ximo middleware ou rota
    next();
  };
  
  // Aplica o middleware "porteiroMiddleware" de forma global
  // Isso significa que ele ser√° executado em **todas as requisi√ß√µes**, independentemente da rota
  app.use(porteiroMiddleware);
